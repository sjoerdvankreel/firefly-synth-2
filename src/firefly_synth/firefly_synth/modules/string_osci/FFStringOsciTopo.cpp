#include <firefly_synth/shared/FFPlugTopo.hpp>
#include <firefly_synth/shared/FFTopoDetail.hpp>
#include <firefly_synth/modules/string_osci/FFStringOsciTopo.hpp>
#include <firefly_synth/modules/string_osci/FFStringOsciGraph.hpp>
#include <firefly_base/base/topo/static/FBStaticModule.hpp>

std::unique_ptr<FBStaticModule>
FFMakeStringOsciTopo()
{
  auto result = std::make_unique<FBStaticModule>();
  result->voice = true;
  result->name = "String";
  result->slotCount = FFStringOsciCount;
  result->graphCount = 1;
  result->graphRenderer = FFStringOsciRenderGraph;
  result->id = "{3B4A03F2-0A04-425B-8BD5-D770AB4DC87E}";
  result->params.resize((int)FFStringOsciParam::Count);
  result->voiceModuleExchangeAddr = FFSelectVoiceModuleExchangeAddr([](auto& state) { return &state.stringOsci; });
  auto selectModule = [](auto& state) { return &state.voice.stringOsci; };

  auto& type = result->params[(int)FFStringOsciParam::Type];
  type.acc = false;
  type.defaultText = "Off";
  type.name = "Type";
  type.slotCount = 1;
  type.id = "{1C038085-4830-4985-9861-34B020BF85A3}";
  type.type = FBParamType::List;
  type.List().items = {
    { "{75DEEBD4-15EF-402F-B092-D50C03B87737}", "Off" },
    { "{22D40A98-F62B-4022-A356-19AD460AE2B1}", "Uni" },
    { "{808C4DFA-F58D-44E9-AD82-CADF9C1C2A23}", "Norm" } };
  auto selectType = [](auto& module) { return &module.block.type; };
  type.scalarAddr = FFSelectScalarParamAddr(selectModule, selectType);
  type.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectType);
  type.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectType);

  auto& gain = result->params[(int)FFStringOsciParam::Gain];
  gain.acc = true;
  gain.defaultText = "100";
  gain.name = "Gain";
  gain.slotCount = 1;
  gain.unit = "%";
  gain.id = "{86CDFC86-DE6C-4EB0-BCE1-5A74A0488D4B}";
  gain.type = FBParamType::Linear;
  gain.Linear().min = 0.0f;
  gain.Linear().max = 2.0f;
  gain.Linear().displayMultiplier = 100.0f;
  auto selectGain = [](auto& module) { return &module.acc.gain; };
  gain.scalarAddr = FFSelectScalarParamAddr(selectModule, selectGain);
  gain.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectGain);
  gain.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectGain);
  gain.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& coarse = result->params[(int)FFStringOsciParam::Coarse];
  coarse.acc = true;
  coarse.defaultText = "0";
  coarse.name = "Coarse";
  coarse.slotCount = 1;
  coarse.unit = "Semitones";
  coarse.id = "{AD56E1E7-CB97-4C67-8DC5-9CF74D3D7C4A}";
  coarse.type = FBParamType::Linear;
  coarse.Linear().min = -12.0f;
  coarse.Linear().max = 12.0f;
  auto selectCoarse = [](auto& module) { return &module.acc.coarse; };
  coarse.scalarAddr = FFSelectScalarParamAddr(selectModule, selectCoarse);
  coarse.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectCoarse);
  coarse.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectCoarse);
  coarse.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& fine = result->params[(int)FFStringOsciParam::Fine];
  fine.acc = true;
  fine.defaultText = "0";
  fine.name = "Fine";
  fine.slotCount = 1;
  fine.unit = "Cent";
  fine.id = "{8BA313C0-450C-4A25-9D00-1219B325D7DD}";
  fine.type = FBParamType::Linear;
  fine.Linear().min = -1.0f;
  fine.Linear().max = 1.0f;
  fine.Linear().displayMultiplier = 100.0f;
  auto selectFine = [](auto& module) { return &module.acc.fine; };
  fine.scalarAddr = FFSelectScalarParamAddr(selectModule, selectFine);
  fine.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectFine);
  fine.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectFine);
  fine.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& uniCount = result->params[(int)FFStringOsciParam::UniCount];
  uniCount.acc = false;
  uniCount.defaultText = "1";
  uniCount.display = "Uni";
  uniCount.name = "Unison Count";
  uniCount.slotCount = 1;
  uniCount.id = "{CB0CD524-CD0F-4150-8DE7-A2DD9E12EB37}";
  uniCount.type = FBParamType::Discrete;
  uniCount.Discrete().valueCount = FFOsciBaseUniMaxCount;
  uniCount.Discrete().valueOffset = 1;
  auto selectUniCount = [](auto& module) { return &module.block.uniCount; };
  uniCount.scalarAddr = FFSelectScalarParamAddr(selectModule, selectUniCount);
  uniCount.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectUniCount);
  uniCount.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectUniCount);
  uniCount.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& uniDetune = result->params[(int)FFStringOsciParam::UniDetune];
  uniDetune.acc = true;
  uniDetune.defaultText = "33";
  uniDetune.display = "Dtn";
  uniDetune.name = "Unison Detune";
  uniDetune.slotCount = 1;
  uniDetune.unit = "%";
  uniDetune.id = "{086DD556-6CC5-4E52-9A06-4B55FF59AE10}";
  uniDetune.type = FBParamType::Identity;
  auto selectUniDetune = [](auto& module) { return &module.acc.uniDetune; };
  uniDetune.scalarAddr = FFSelectScalarParamAddr(selectModule, selectUniDetune);
  uniDetune.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectUniDetune);
  uniDetune.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectUniDetune);
  uniDetune.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::UniCount }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 1; });

  auto& uniSpread = result->params[(int)FFStringOsciParam::UniSpread];
  uniSpread.acc = true;
  uniSpread.defaultText = "50";
  uniSpread.display = "Sprd";
  uniSpread.name = "Unison Spread";
  uniSpread.slotCount = 1;
  uniSpread.unit = "%";
  uniSpread.id = "{DC396041-B75D-45C2-9892-00699B15D498}";
  uniSpread.type = FBParamType::Identity;
  auto selectUniSpread = [](auto& module) { return &module.acc.uniSpread; };
  uniSpread.scalarAddr = FFSelectScalarParamAddr(selectModule, selectUniSpread);
  uniSpread.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectUniSpread);
  uniSpread.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectUniSpread);
  uniSpread.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::UniCount }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 1; });

  auto& uniBlend = result->params[(int)FFStringOsciParam::UniBlend];
  uniBlend.acc = true;
  uniBlend.defaultText = "100";
  uniBlend.display = "Blnd";
  uniBlend.name = "Unison Blend";
  uniBlend.slotCount = 1;
  uniBlend.unit = "%";
  uniBlend.id = "{DB12942B-8978-4877-B37D-D5AB5E4A536A}";
  uniBlend.type = FBParamType::Identity;
  auto selectUniBlend = [](auto& module) { return &module.acc.uniBlend; };
  uniBlend.scalarAddr = FFSelectScalarParamAddr(selectModule, selectUniBlend);
  uniBlend.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectUniBlend);
  uniBlend.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectUniBlend);
  uniBlend.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::UniCount }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 1; });

  auto& seed = result->params[(int)FFStringOsciParam::Seed];
  seed.acc = false;
  seed.defaultText = "0";
  seed.name = "Seed";
  seed.slotCount = 1;
  seed.id = "{147FBBB6-3C3B-471B-8BDA-A10DA068769E}";
  seed.type = FBParamType::Discrete;
  seed.Discrete().valueCount = FFStringOsciMaxSeed + 1;
  auto selectSeed = [](auto& module) { return &module.block.seed; };
  seed.scalarAddr = FFSelectScalarParamAddr(selectModule, selectSeed);
  seed.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectSeed);
  seed.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectSeed);
  seed.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& poles = result->params[(int)FFStringOsciParam::Poles];
  poles.acc = false;
  poles.defaultText = "4";
  poles.name = "Quality";
  poles.display = "Qlty";
  poles.slotCount = 1;
  poles.id = "{84B10EBF-E55D-43DF-8E80-3F1FCE093400}";
  poles.type = FBParamType::Discrete;
  poles.Discrete().valueOffset = 1;
  poles.Discrete().valueCount = FFStringOsciMaxPoles;
  auto selectPoles = [](auto& module) { return &module.block.poles; };
  poles.scalarAddr = FFSelectScalarParamAddr(selectModule, selectPoles);
  poles.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectPoles);
  poles.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectPoles);
  poles.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& color = result->params[(int)FFStringOsciParam::Color];
  color.acc = true;
  color.defaultText = "0";
  color.name = "Color";
  color.slotCount = 1;
  color.unit = "%";
  color.id = "{32C65288-B8CD-4245-9ED1-818667C65253}";
  color.type = FBParamType::Identity;
  auto selectColor = [](auto& module) { return &module.acc.color; };
  color.scalarAddr = FFSelectScalarParamAddr(selectModule, selectColor);
  color.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectColor);
  color.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectColor);
  color.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& x = result->params[(int)FFStringOsciParam::X];
  x.acc = true;
  x.defaultText = "100";
  x.name = "X";
  x.slotCount = 1;
  x.unit = "%";
  x.id = "{E911D100-EAD7-4915-AB3C-A27BA73396EC}";
  x.type = FBParamType::Identity;
  auto selectX = [](auto& module) { return &module.acc.x; };
  x.scalarAddr = FFSelectScalarParamAddr(selectModule, selectX);
  x.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectX);
  x.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectX);
  x.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& y = result->params[(int)FFStringOsciParam::Y];
  y.acc = true;
  y.defaultText = "100";
  y.name = "Y";
  y.slotCount = 1;
  y.unit = "%";
  y.id = "{1979C7C6-F86E-40EE-8245-163C9F497469}";
  y.type = FBParamType::Identity;
  auto selectY = [](auto& module) { return &module.acc.y; };
  y.scalarAddr = FFSelectScalarParamAddr(selectModule, selectY);
  y.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectY);
  y.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectY);
  y.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& excite = result->params[(int)FFStringOsciParam::Excite];
  excite.acc = true;
  excite.defaultText = "0";
  excite.name = "Excite";
  excite.slotCount = 1;
  excite.unit = "%";
  excite.id = "{7933FB74-1FEF-428B-A08A-33925174473B}";
  excite.type = FBParamType::Log2;
  excite.Log2().displayMultiplier = 100.0f;
  excite.Log2().Init(-0.01f, 0.01f, 1.01f);
  auto selectExcite = [](auto& module) { return &module.acc.excite; };
  excite.scalarAddr = FFSelectScalarParamAddr(selectModule, selectExcite);
  excite.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectExcite);
  excite.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectExcite);
  excite.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& lpOn = result->params[(int)FFStringOsciParam::LPOn];
  lpOn.acc = false;
  lpOn.name = "LP On";
  lpOn.display = "LP";
  lpOn.slotCount = 1;
  lpOn.defaultText = "Off";
  lpOn.id = "{2AE4576B-8611-498B-978B-53CD1E7EA1F4}";
  lpOn.type = FBParamType::Boolean;
  auto selectLPOn = [](auto& module) { return &module.block.lpOn; };
  lpOn.scalarAddr = FFSelectScalarParamAddr(selectModule, selectLPOn);
  lpOn.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectLPOn);
  lpOn.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectLPOn);
  lpOn.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& lpFreq = result->params[(int)FFStringOsciParam::LPFreq];
  lpFreq.acc = true;
  lpFreq.defaultText = std::to_string((int)FFMaxStateVariableFilterFreq);
  lpFreq.name = "LP Freq";
  lpFreq.display = "LP";
  lpFreq.slotCount = 1;
  lpFreq.unit = "Hz";
  lpFreq.id = "{06461261-A1A1-45B6-866A-CB932F2874B9}";
  lpFreq.type = FBParamType::Log2;
  lpFreq.Log2().Init(0.0f, FFMinStateVariableFilterFreq, FFMaxStateVariableFilterFreq);
  auto selectLPFreq = [](auto& module) { return &module.acc.lpFreq; };
  lpFreq.scalarAddr = FFSelectScalarParamAddr(selectModule, selectLPFreq);
  lpFreq.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectLPFreq);
  lpFreq.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectLPFreq);
  lpFreq.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::LPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });

  auto& lpRes = result->params[(int)FFStringOsciParam::LPRes];
  lpRes.acc = true;
  lpRes.defaultText = "0";
  lpRes.name = "LP Res";
  lpRes.display = "Res";
  lpRes.slotCount = 1;
  lpRes.unit = "%";
  lpRes.id = "{2029BA86-6CA4-4DA8-B2AD-D4A06FF5002D}";
  lpRes.type = FBParamType::Identity;
  auto selectLPRes = [](auto& module) { return &module.acc.lpRes; };
  lpRes.scalarAddr = FFSelectScalarParamAddr(selectModule, selectLPRes);
  lpRes.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectLPRes);
  lpRes.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectLPRes);
  lpRes.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::LPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });

  auto& lpKTrk = result->params[(int)FFStringOsciParam::LPKTrk];
  lpKTrk.acc = true;
  lpKTrk.defaultText = "0";
  lpKTrk.name = "LP KeyTrk";
  lpKTrk.display = "KTrk";
  lpKTrk.slotCount = 1;
  lpKTrk.unit = "%";
  lpKTrk.id = "{7DC28A03-D1EE-4938-9F11-1D3996021662}";
  lpKTrk.type = FBParamType::Linear;
  lpKTrk.Linear().min = -2.0f;
  lpKTrk.Linear().max = 2.0f;
  lpKTrk.Linear().displayMultiplier = 100;
  auto selectLPKeyTrk = [](auto& module) { return &module.acc.lpKTrk; };
  lpKTrk.scalarAddr = FFSelectScalarParamAddr(selectModule, selectLPKeyTrk);
  lpKTrk.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectLPKeyTrk);
  lpKTrk.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectLPKeyTrk);
  lpKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });
  lpKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::LPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });

  auto& hpOn = result->params[(int)FFStringOsciParam::HPOn];
  hpOn.acc = false;
  hpOn.name = "HP On";
  hpOn.display = "HP";
  hpOn.slotCount = 1;
  hpOn.defaultText = "Off";
  hpOn.id = "{32237430-13BF-4239-B570-E94E10913A88}";
  hpOn.type = FBParamType::Boolean;
  auto selectHPOn = [](auto& module) { return &module.block.hpOn; };
  hpOn.scalarAddr = FFSelectScalarParamAddr(selectModule, selectHPOn);
  hpOn.voiceBlockProcAddr = FFSelectProcParamAddr(selectModule, selectHPOn);
  hpOn.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectHPOn);
  hpOn.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& hpFreq = result->params[(int)FFStringOsciParam::HPFreq];
  hpFreq.acc = true;
  hpFreq.defaultText = std::to_string((int)FFMinStateVariableFilterFreq);
  hpFreq.name = "HP";
  hpFreq.slotCount = 1;
  hpFreq.unit = "Hz";
  hpFreq.id = "{1185219D-3A70-4B80-B542-C78704E09F85}";
  hpFreq.type = FBParamType::Log2;
  hpFreq.Log2().Init(0.0f, FFMinStateVariableFilterFreq, FFMaxStateVariableFilterFreq);
  auto selectHPFreq = [](auto& module) { return &module.acc.hpFreq; };
  hpFreq.scalarAddr = FFSelectScalarParamAddr(selectModule, selectHPFreq);
  hpFreq.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectHPFreq);
  hpFreq.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectHPFreq);
  hpFreq.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });
  hpFreq.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::HPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });

  auto& hpRes = result->params[(int)FFStringOsciParam::HPRes];
  hpRes.acc = true;
  hpRes.defaultText = "0";
  hpRes.name = "HP Res";
  hpRes.display = "Res";
  hpRes.slotCount = 1;
  hpRes.unit = "%";
  hpRes.id = "{6F35E646-83A9-440C-B041-B747AD17A01C}";
  hpRes.type = FBParamType::Identity;
  auto selectHPRes = [](auto& module) { return &module.acc.hpRes; };
  hpRes.scalarAddr = FFSelectScalarParamAddr(selectModule, selectHPRes);
  hpRes.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectHPRes);
  hpRes.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectHPRes);
  hpRes.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });
  hpRes.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::HPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });

  auto& hpKTrk = result->params[(int)FFStringOsciParam::HPKTrk];
  hpKTrk.acc = true;
  hpKTrk.defaultText = "0";
  hpKTrk.name = "HP KeyTrk";
  hpKTrk.display = "KTrk";
  hpKTrk.slotCount = 1;
  hpKTrk.unit = "%";
  hpKTrk.id = "{DCF3E189-013E-4AE0-98F7-75AF83867CF4}";
  hpKTrk.type = FBParamType::Linear;
  hpKTrk.Linear().min = -2.0f;
  hpKTrk.Linear().max = 2.0f;
  hpKTrk.Linear().displayMultiplier = 100;
  auto selectHPKeyTrk = [](auto& module) { return &module.acc.hpKTrk; };
  hpKTrk.scalarAddr = FFSelectScalarParamAddr(selectModule, selectHPKeyTrk);
  hpKTrk.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectHPKeyTrk);
  hpKTrk.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectHPKeyTrk);
  hpKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });
  hpKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type, (int)FFStringOsciParam::HPOn }, [](auto const& vs) { return vs[0] != 0 && vs[1] != 0; });
  
  auto& damp = result->params[(int)FFStringOsciParam::Damp];
  damp.acc = true;
  damp.defaultText = "67";
  damp.name = "Damp";
  damp.slotCount = 1;
  damp.unit = "%";
  damp.id = "{1FD56760-3837-4A1B-8CAF-8906BA0BC6A1}";
  damp.type = FBParamType::Identity;
  auto selectDamp = [](auto& module) { return &module.acc.damp; };
  damp.scalarAddr = FFSelectScalarParamAddr(selectModule, selectDamp);
  damp.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectDamp);
  damp.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectDamp);
  damp.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& dampKTrk = result->params[(int)FFStringOsciParam::DampKTrk];
  dampKTrk.acc = true;
  dampKTrk.defaultText = "0";
  dampKTrk.name = "Damp KTrk";
  dampKTrk.display = "KTrk";
  dampKTrk.slotCount = 1;
  dampKTrk.unit = "%";
  dampKTrk.id = "{050FADF1-C79E-4154-B219-C4970E029FE0}";
  dampKTrk.type = FBParamType::Linear;
  dampKTrk.Linear().min = -1.0f;
  dampKTrk.Linear().max = 1.0f;
  dampKTrk.Linear().displayMultiplier = 100;
  auto selectDampKTrk = [](auto& module) { return &module.acc.dampKTrk; };
  dampKTrk.scalarAddr = FFSelectScalarParamAddr(selectModule, selectDampKTrk);
  dampKTrk.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectDampKTrk);
  dampKTrk.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectDampKTrk);
  dampKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& feedback = result->params[(int)FFStringOsciParam::Feedback];
  feedback.acc = true;
  feedback.defaultText = "100";
  feedback.name = "Feedback";
  feedback.display = "Fdbk";
  feedback.slotCount = 1;
  feedback.unit = "%";
  feedback.id = "{74C60E5D-C7FA-46E5-8ACC-083130E1C735}";
  feedback.type = FBParamType::Identity;
  auto selectFeedback = [](auto& module) { return &module.acc.feedback; };
  feedback.scalarAddr = FFSelectScalarParamAddr(selectModule, selectFeedback);
  feedback.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectFeedback);
  feedback.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectFeedback);
  feedback.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& feedbackKTrk = result->params[(int)FFStringOsciParam::FeedbackKTrk];
  feedbackKTrk.acc = true;
  feedbackKTrk.defaultText = "0";
  feedbackKTrk.name = "Feedback KTrk";
  feedbackKTrk.display = "KTrk";
  feedbackKTrk.slotCount = 1;
  feedbackKTrk.unit = "%";
  feedbackKTrk.id = "{7685CE3A-0F9F-41CF-9808-B6B8ABB726AC}";
  feedbackKTrk.type = FBParamType::Linear;
  feedbackKTrk.Linear().min = -1.0f;
  feedbackKTrk.Linear().max = 1.0f;
  feedbackKTrk.Linear().displayMultiplier = 100;
  auto selectFeedbackKTrk = [](auto& module) { return &module.acc.feedbackKTrk; };
  feedbackKTrk.scalarAddr = FFSelectScalarParamAddr(selectModule, selectFeedbackKTrk);
  feedbackKTrk.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectFeedbackKTrk);
  feedbackKTrk.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectFeedbackKTrk);
  feedbackKTrk.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& trackingKey = result->params[(int)FFStringOsciParam::TrackingKey];
  trackingKey.acc = true;
  trackingKey.defaultText = "0";
  trackingKey.name = "Tracking Key";
  trackingKey.display = "Key";
  trackingKey.slotCount = 1;
  trackingKey.unit = "Semitones";
  trackingKey.id = "{988CB489-9062-4A1B-9C5E-B0674F4AAD4F}";
  trackingKey.type = FBParamType::Linear;
  trackingKey.Linear().min = -64.0f;
  trackingKey.Linear().max = 64.0f;
  auto selectTrackingKey = [](auto& module) { return &module.acc.trackingKey; };
  trackingKey.scalarAddr = FFSelectScalarParamAddr(selectModule, selectTrackingKey);
  trackingKey.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectTrackingKey);
  trackingKey.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectTrackingKey);
  trackingKey.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& trackingRange = result->params[(int)FFStringOsciParam::TrackingRange];
  trackingRange.acc = true;
  trackingRange.defaultText = "24";
  trackingRange.name = "Tracking Range";
  trackingRange.display = "Range";
  trackingRange.slotCount = 1;
  trackingRange.unit = "Semitones";
  trackingRange.id = "{18D3BAE2-B9A6-4C02-B042-6DB92D17A0DA}}";
  trackingRange.type = FBParamType::Linear;
  trackingRange.Linear().min = 12.0f;
  trackingRange.Linear().max = 128.0f;
  auto selectTrackingRange = [](auto& module) { return &module.acc.trackingRange; };
  trackingRange.scalarAddr = FFSelectScalarParamAddr(selectModule, selectTrackingRange);
  trackingRange.voiceAccProcAddr = FFSelectProcParamAddr(selectModule, selectTrackingRange);
  trackingRange.voiceExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectTrackingRange);
  trackingRange.dependencies.enabled.audio.When({ (int)FFStringOsciParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  return result;
}