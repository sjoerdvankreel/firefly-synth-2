#include <firefly_synth/shared/FFPlugTopo.hpp>
#include <firefly_synth/shared/FFTopoDetail.hpp>
#include <firefly_synth/modules/global_uni/FFGlobalUniTopo.hpp>
#include <firefly_base/base/topo/static/FBStaticModule.hpp>

std::unique_ptr<FBStaticModule>
FFMakeGlobalUniTopo()
{
  auto result = std::make_unique<FBStaticModule>();
  result->voice = false;
  result->name = "Global Uni";
  result->matrixName = "G.Uni";
  result->slotCount = 1;
  result->id = "{5A505AF6-4E05-4680-BAFE-B880CE4E1BC2}";
  result->params.resize((int)FFGlobalUniParam::Count);
  result->globalModuleExchangeAddr = FFSelectGlobalModuleExchangeAddr([](auto& state) { return &state.globalUni; });
  auto selectModule = [](auto& state) { return &state.global.globalUni; };

  auto& type = result->params[(int)FFGlobalUniParam::Type];
  type.mode = FBParamMode::Block;
  type.name = "Type";
  type.slotCount = 1;
  type.id = "{C5397E08-EB50-4521-9B88-A8D7DFE49208}";
  type.defaultText = "Off";
  type.type = FBParamType::List;
  type.List().items = {
    { "{59453D1D-06AB-4541-ACC6-CE39AC70040C}", "Off" },
    { "{99BA36B5-BFD5-4E9D-BFDF-31860C3B2F4C}", "Basic" },
    { "{D86C0FF4-10B2-416F-B5E3-DBB38A706C70}", "Full" } };
  auto selectType = [](auto& module) { return &module.block.type; };
  type.scalarAddr = FFSelectScalarParamAddr(selectModule, selectType);
  type.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectType);
  type.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectType);

  auto& voiceCount = result->params[(int)FFGlobalUniParam::VoiceCount];
  voiceCount.mode = FBParamMode::Block;
  voiceCount.defaultText = "2";
  voiceCount.name = "Count";
  voiceCount.slotCount = 1;
  voiceCount.id = "{617F995E-38CC-40BE-899E-AEAE37852092}";
  voiceCount.type = FBParamType::Discrete;
  voiceCount.Discrete().valueCount = FFGlobalUniMaxCount;
  voiceCount.Discrete().valueOffset = 1;
  auto selectVoiceCount = [](auto& module) { return &module.block.voiceCount; };
  voiceCount.scalarAddr = FFSelectScalarParamAddr(selectModule, selectVoiceCount);
  voiceCount.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectVoiceCount);
  voiceCount.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectVoiceCount);
  voiceCount.dependencies.enabled.audio.WhenSimple({ (int)FFGlobalUniParam::Type }, [](auto const& vs) { return vs[0] != 0; });

  auto& fullOscGain = result->params[(int)FFGlobalUniParam::FullOscGain];
  fullOscGain.mode = FBParamMode::Accurate;
  fullOscGain.defaultText = "50";
  fullOscGain.name = "Osc Gain";
  fullOscGain.slotCount = FFGlobalUniMaxCount;
  fullOscGain.unit = "%";
  fullOscGain.id = "{847E5FD5-8DAC-43B1-BA0E-125FD916844C}";
  fullOscGain.type = FBParamType::Identity;
  auto selectfullOscGain = [](auto& module) { return &module.acc.fullOscGain; };
  fullOscGain.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscGain);
  fullOscGain.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscGain);
  fullOscGain.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscGain);
  fullOscGain.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscGain, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullOscPan = result->params[(int)FFGlobalUniParam::FullOscPan];
  fullOscPan.mode = FBParamMode::Accurate;
  fullOscPan.defaultText = "50";
  fullOscPan.name = "Osc Pan";
  fullOscPan.slotCount = FFGlobalUniMaxCount;
  fullOscPan.unit = "%";
  fullOscPan.id = "{9CACBCF5-9D85-431B-986B-E2B50DC3336A}";
  fullOscPan.type = FBParamType::Identity;
  auto selectfullOscPan = [](auto& module) { return &module.acc.fullOscPan; };
  fullOscPan.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscPan);
  fullOscPan.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscPan);
  fullOscPan.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscPan);
  fullOscPan.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscPan, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullOscCoarse = result->params[(int)FFGlobalUniParam::FullOscCoarse];
  fullOscCoarse.mode = FBParamMode::Accurate;
  fullOscCoarse.defaultText = "0";
  fullOscCoarse.name = "Osc Coarse";
  fullOscCoarse.slotCount = FFGlobalUniMaxCount;
  fullOscCoarse.unit = "Semitones";
  fullOscCoarse.id = "{C16C50D5-00C0-4393-87F9-1A7C457F4483}";
  fullOscCoarse.type = FBParamType::Linear;
  fullOscCoarse.Linear().min = -FFGlobalUniOscCoarseSemis;
  fullOscCoarse.Linear().max = FFGlobalUniOscCoarseSemis;
  auto selectfullOscCoarse = [](auto& module) { return &module.acc.fullOscCoarse; };
  fullOscCoarse.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscCoarse);
  fullOscCoarse.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscCoarse);
  fullOscCoarse.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscCoarse);
  fullOscCoarse.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscCoarse, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullOscFine = result->params[(int)FFGlobalUniParam::FullOscFine];
  fullOscFine.mode = FBParamMode::Accurate;
  fullOscFine.defaultText = "50";
  fullOscFine.name = "Osc Fine";
  fullOscFine.slotCount = FFGlobalUniMaxCount;
  fullOscFine.id = "{D32C05E9-BE89-43CB-887F-AF7B1001518F}";
  fullOscFine.unit = "%";
  fullOscFine.type = FBParamType::Identity;
  auto selectfullOscFine = [](auto& module) { return &module.acc.fullOscFine; };
  fullOscFine.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscFine);
  fullOscFine.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscFine);
  fullOscFine.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscFine);
  fullOscFine.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscFine, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });
  
  auto& fullOscPhaseOffset = result->params[(int)FFGlobalUniParam::FullOscPhaseOffset];
  fullOscPhaseOffset.mode = FBParamMode::Block;
  fullOscPhaseOffset.defaultText = "0";
  fullOscPhaseOffset.name = "Osc Phase";
  fullOscPhaseOffset.slotCount = FFGlobalUniMaxCount;
  fullOscPhaseOffset.unit = "%";
  fullOscPhaseOffset.id = "{EC98E6C3-0BB3-4E19-A861-5CDDA8C0401F}";
  fullOscPhaseOffset.type = FBParamType::Identity;
  auto selectfullOscPhaseOffset = [](auto& module) { return &module.block.fullOscPhaseOffset; };
  fullOscPhaseOffset.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscPhaseOffset);
  fullOscPhaseOffset.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscPhaseOffset);
  fullOscPhaseOffset.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscPhaseOffset);
  fullOscPhaseOffset.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscPhaseOffset, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullOscPhaseRand = result->params[(int)FFGlobalUniParam::FullOscPhaseRand];
  fullOscPhaseRand.mode = FBParamMode::Block;
  fullOscPhaseRand.defaultText = "0";
  fullOscPhaseRand.name = "Osc Phs Rnd";
  fullOscPhaseRand.slotCount = FFGlobalUniMaxCount;
  fullOscPhaseRand.unit = "%";
  fullOscPhaseRand.id = "{8A9F0F51-B8CF-4BBE-A35A-3A5A8A1FA0EF}";
  fullOscPhaseRand.type = FBParamType::Identity;
  auto selectfullOscPhaseRand = [](auto& module) { return &module.block.fullOscPhaseRand; };
  fullOscPhaseRand.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullOscPhaseRand);
  fullOscPhaseRand.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullOscPhaseRand);
  fullOscPhaseRand.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullOscPhaseRand);
  fullOscPhaseRand.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullOscPhaseRand, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFORate = result->params[(int)FFGlobalUniParam::FullLFORate];
  fullLFORate.mode = FBParamMode::Accurate;
  fullLFORate.defaultText = "50";
  fullLFORate.name = "LFO Rate";
  fullLFORate.slotCount = FFGlobalUniMaxCount;
  fullLFORate.unit = "%";
  fullLFORate.id = "{A14D92A7-0952-4DF9-98D6-194B1A763DDF}";
  fullLFORate.type = FBParamType::Identity;
  auto selectfullLFORate = [](auto& module) { return &module.acc.fullLFORate; };
  fullLFORate.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFORate);
  fullLFORate.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFORate);
  fullLFORate.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFORate);
  fullLFORate.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFORate, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFOMin = result->params[(int)FFGlobalUniParam::FullLFOMin];
  fullLFOMin.mode = FBParamMode::Accurate;
  fullLFOMin.defaultText = "50";
  fullLFOMin.name = "LFO Min";
  fullLFOMin.slotCount = FFGlobalUniMaxCount;
  fullLFOMin.unit = "%";
  fullLFOMin.id = "{BC67CD56-29BF-491D-BA5F-43541B6E506D}";
  fullLFOMin.type = FBParamType::Identity;
  auto selectfullLFOMin = [](auto& module) { return &module.acc.fullLFOMin; };
  fullLFOMin.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOMin);
  fullLFOMin.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOMin);
  fullLFOMin.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOMin);
  fullLFOMin.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOMin, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });
  
  auto& fullLFOMax = result->params[(int)FFGlobalUniParam::FullLFOMax];
  fullLFOMax.mode = FBParamMode::Accurate;
  fullLFOMax.defaultText = "50";
  fullLFOMax.name = "LFO Max";
  fullLFOMax.slotCount = FFGlobalUniMaxCount;
  fullLFOMax.unit = "%";
  fullLFOMax.id = "{D6A4D1B5-8961-4C5B-96CA-792F73227A0C}";
  fullLFOMax.type = FBParamType::Identity;
  auto selectfullLFOMax = [](auto& module) { return &module.acc.fullLFOMax; };
  fullLFOMax.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOMax);
  fullLFOMax.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOMax);
  fullLFOMax.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOMax);
  fullLFOMax.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOMax, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFOSkewAX = result->params[(int)FFGlobalUniParam::FullLFOSkewAX];
  fullLFOSkewAX.mode = FBParamMode::Accurate;
  fullLFOSkewAX.defaultText = "50";
  fullLFOSkewAX.name = "LFO SkewA X";
  fullLFOSkewAX.slotCount = FFGlobalUniMaxCount;
  fullLFOSkewAX.unit = "%";
  fullLFOSkewAX.id = "{5FABD18F-6F53-4532-AC77-7FC5882B2CD1}";
  fullLFOSkewAX.type = FBParamType::Identity;
  auto selectfullLFOSkewAX = [](auto& module) { return &module.acc.fullLFOSkewAX; };
  fullLFOSkewAX.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOSkewAX);
  fullLFOSkewAX.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOSkewAX);
  fullLFOSkewAX.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOSkewAX);
  fullLFOSkewAX.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOSkewAX, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFOSkewAY = result->params[(int)FFGlobalUniParam::FullLFOSkewAY];
  fullLFOSkewAY.mode = FBParamMode::Accurate;
  fullLFOSkewAY.defaultText = "50";
  fullLFOSkewAY.name = "LFO SkewA Y";
  fullLFOSkewAY.slotCount = FFGlobalUniMaxCount;
  fullLFOSkewAY.unit = "%";
  fullLFOSkewAY.id = "{7C900D23-EC5F-483B-82A3-EB27E2DD9E66}";
  fullLFOSkewAY.type = FBParamType::Identity;
  auto selectfullLFOSkewAY = [](auto& module) { return &module.acc.fullLFOSkewAY; };
  fullLFOSkewAY.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOSkewAY);
  fullLFOSkewAY.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOSkewAY);
  fullLFOSkewAY.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOSkewAY);
  fullLFOSkewAY.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOSkewAY, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFOPhaseOffset = result->params[(int)FFGlobalUniParam::FullLFOPhaseOffset];
  fullLFOPhaseOffset.mode = FBParamMode::Block;
  fullLFOPhaseOffset.defaultText = "0";
  fullLFOPhaseOffset.name = "LFO Phase";
  fullLFOPhaseOffset.slotCount = FFGlobalUniMaxCount;
  fullLFOPhaseOffset.unit = "%";
  fullLFOPhaseOffset.id = "{00A68371-5419-4398-8B42-4AADF0955DAF}";
  fullLFOPhaseOffset.type = FBParamType::Identity;
  auto selectfullLFOPhaseOffset = [](auto& module) { return &module.block.fullLFOPhaseOffset; };
  fullLFOPhaseOffset.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOPhaseOffset);
  fullLFOPhaseOffset.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOPhaseOffset);
  fullLFOPhaseOffset.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOPhaseOffset);
  fullLFOPhaseOffset.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOPhaseOffset, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullLFOPhaseRand = result->params[(int)FFGlobalUniParam::FullLFOPhaseRand];
  fullLFOPhaseRand.mode = FBParamMode::Block;
  fullLFOPhaseRand.defaultText = "0";
  fullLFOPhaseRand.name = "LFO Phs Rnd";
  fullLFOPhaseRand.slotCount = FFGlobalUniMaxCount;
  fullLFOPhaseRand.unit = "%";
  fullLFOPhaseRand.id = "{78DD7308-DA56-4A61-8940-6FE8F0632EAD}";
  fullLFOPhaseRand.type = FBParamType::Identity;
  auto selectfullLFOPhaseRand = [](auto& module) { return &module.block.fullLFOPhaseRand; };
  fullLFOPhaseRand.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullLFOPhaseRand);
  fullLFOPhaseRand.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullLFOPhaseRand);
  fullLFOPhaseRand.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullLFOPhaseRand);
  fullLFOPhaseRand.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullLFOPhaseRand, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullVFXParamA = result->params[(int)FFGlobalUniParam::FullVFXParamA];
  fullVFXParamA.mode = FBParamMode::Accurate;
  fullVFXParamA.defaultText = "50";
  fullVFXParamA.name = "VFX Param A";
  fullVFXParamA.slotCount = FFGlobalUniMaxCount;
  fullVFXParamA.unit = "%";
  fullVFXParamA.id = "{E383FFF3-6549-44A4-878B-9BE81EB4A69F}";
  fullVFXParamA.type = FBParamType::Identity;
  auto selectfullVFXParamA = [](auto& module) { return &module.acc.fullVFXParamA; };
  fullVFXParamA.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullVFXParamA);
  fullVFXParamA.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullVFXParamA);
  fullVFXParamA.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullVFXParamA);
  fullVFXParamA.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullVFXParamA, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullVFXParamB = result->params[(int)FFGlobalUniParam::FullVFXParamB];
  fullVFXParamB.mode = FBParamMode::Accurate;
  fullVFXParamB.defaultText = "50";
  fullVFXParamB.name = "VFX Param B";
  fullVFXParamB.slotCount = FFGlobalUniMaxCount;
  fullVFXParamB.unit = "%";
  fullVFXParamB.id = "{82D2D353-D454-496B-BB0E-F7B23D20D698}";
  fullVFXParamB.type = FBParamType::Identity;
  auto selectfullVFXParamB = [](auto& module) { return &module.acc.fullVFXParamB; };
  fullVFXParamB.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullVFXParamB);
  fullVFXParamB.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullVFXParamB);
  fullVFXParamB.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullVFXParamB);
  fullVFXParamB.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullVFXParamB, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullVFXParamC = result->params[(int)FFGlobalUniParam::FullVFXParamC];
  fullVFXParamC.mode = FBParamMode::Accurate;
  fullVFXParamC.defaultText = "50";
  fullVFXParamC.name = "VFX Param C";
  fullVFXParamC.slotCount = FFGlobalUniMaxCount;
  fullVFXParamC.unit = "%";
  fullVFXParamC.id = "{55539EFD-3561-4F1F-BDDC-FF0CEC2AA14B}";
  fullVFXParamC.type = FBParamType::Identity;
  auto selectfullVFXParamC = [](auto& module) { return &module.acc.fullVFXParamC; };
  fullVFXParamC.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullVFXParamC);
  fullVFXParamC.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullVFXParamC);
  fullVFXParamC.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullVFXParamC);
  fullVFXParamC.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullVFXParamC, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullVFXParamD = result->params[(int)FFGlobalUniParam::FullVFXParamD];
  fullVFXParamD.mode = FBParamMode::Accurate;
  fullVFXParamD.defaultText = "50";
  fullVFXParamD.name = "VFX Param D";
  fullVFXParamD.slotCount = FFGlobalUniMaxCount;
  fullVFXParamD.unit = "%";
  fullVFXParamD.id = "{9346FF6B-068F-4F36-A4CD-68A652CF1A2C}";
  fullVFXParamD.type = FBParamType::Identity;
  auto selectfullVFXParamD = [](auto& module) { return &module.acc.fullVFXParamD; };
  fullVFXParamD.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullVFXParamD);
  fullVFXParamD.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullVFXParamD);
  fullVFXParamD.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullVFXParamD);
  fullVFXParamD.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullVFXParamD, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEnvOffset = result->params[(int)FFGlobalUniParam::FullEnvOffset];
  fullEnvOffset.mode = FBParamMode::Block;
  fullEnvOffset.defaultText = "0";
  fullEnvOffset.name = "Env Offset";
  fullEnvOffset.slotCount = FFGlobalUniMaxCount;
  fullEnvOffset.unit = "Sec";
  fullEnvOffset.id = "{AEDA998E-B0B7-4A78-8C52-F6B809AC5352}";
  fullEnvOffset.type = FBParamType::Linear;
  fullEnvOffset.Linear().min = 0.0f;
  fullEnvOffset.Linear().max = 0.0f;
  fullEnvOffset.Linear().editSkewFactor = 0.5f;
  auto selectfullEnvOffset = [](auto& module) { return &module.block.fullEnvOffset; };
  fullEnvOffset.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEnvOffset);
  fullEnvOffset.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullEnvOffset);
  fullEnvOffset.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEnvOffset);
  fullEnvOffset.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEnvOffset, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEnvStretch = result->params[(int)FFGlobalUniParam::FullEnvStretch];
  fullEnvStretch.mode = FBParamMode::Block;
  fullEnvStretch.defaultText = "100";
  fullEnvStretch.name = "Env Stretch";
  fullEnvStretch.slotCount = FFGlobalUniMaxCount;
  fullEnvStretch.unit = "%";
  fullEnvStretch.id = "{6155B06D-D928-4EBF-9A52-99EAA3341D26}";
  fullEnvStretch.type = FBParamType::Linear;
  fullEnvStretch.Linear().min = 0.5f;
  fullEnvStretch.Linear().max = 1.5f;
  fullEnvStretch.Linear().displayMultiplier = 100.0f;
  auto selectfullEnvStretch = [](auto& module) { return &module.block.fullEnvStretch; };
  fullEnvStretch.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEnvStretch);
  fullEnvStretch.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullEnvStretch);
  fullEnvStretch.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEnvStretch);
  fullEnvStretch.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEnvStretch, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoExtend = result->params[(int)FFGlobalUniParam::FullEchoExtend];
  fullEchoExtend.mode = FBParamMode::Block;
  fullEchoExtend.defaultText = "50";
  fullEchoExtend.name = "Echo Extend";
  fullEchoExtend.slotCount = FFGlobalUniMaxCount;
  fullEchoExtend.unit = "%";
  fullEchoExtend.id = "{B60645F1-F349-4911-AA11-218E188C0D1F}";
  fullEchoExtend.type = FBParamType::Identity;
  auto selectfullEchoExtend = [](auto& module) { return &module.block.fullEchoExtend; };
  fullEchoExtend.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoExtend);
  fullEchoExtend.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoExtend);
  fullEchoExtend.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoExtend);
  fullEchoExtend.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoExtend, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoFade = result->params[(int)FFGlobalUniParam::FullEchoFade];
  fullEchoFade.mode = FBParamMode::Block;
  fullEchoFade.defaultText = "50";
  fullEchoFade.name = "Echo Fade";
  fullEchoFade.slotCount = FFGlobalUniMaxCount;
  fullEchoFade.unit = "%";
  fullEchoFade.id = "{A9F81A4A-1FB3-418B-86F5-8F49C77934B7}";
  fullEchoFade.type = FBParamType::Identity;
  auto selectfullEchoFade = [](auto& module) { return &module.block.fullEchoFade; };
  fullEchoFade.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoFade);
  fullEchoFade.globalBlockProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoFade);
  fullEchoFade.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoFade);
  fullEchoFade.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoFade, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoTapLevel = result->params[(int)FFGlobalUniParam::FullEchoTapLevel];
  fullEchoTapLevel.mode = FBParamMode::Accurate;
  fullEchoTapLevel.defaultText = "50";
  fullEchoTapLevel.name = "Echo Tap Lvl";
  fullEchoTapLevel.slotCount = FFGlobalUniMaxCount;
  fullEchoTapLevel.unit = "%";
  fullEchoTapLevel.id = "{A480C75C-3429-44A1-BAAF-44341E793F80}";
  fullEchoTapLevel.type = FBParamType::Identity;
  auto selectfullEchoTapLevel = [](auto& module) { return &module.acc.fullEchoTapLevel; };
  fullEchoTapLevel.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoTapLevel);
  fullEchoTapLevel.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoTapLevel);
  fullEchoTapLevel.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoTapLevel);
  fullEchoTapLevel.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoTapLevel, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoTapDelay = result->params[(int)FFGlobalUniParam::FullEchoTapDelay];
  fullEchoTapDelay.mode = FBParamMode::Accurate;
  fullEchoTapDelay.defaultText = "50";
  fullEchoTapDelay.name = "Echo Tap Dly";
  fullEchoTapDelay.slotCount = FFGlobalUniMaxCount;
  fullEchoTapDelay.unit = "%";
  fullEchoTapDelay.id = "{158E67F4-DD9C-4A2A-93B8-6914B8F9DCED}";
  fullEchoTapDelay.type = FBParamType::Identity;
  auto selectfullEchoTapDelay = [](auto& module) { return &module.acc.fullEchoTapDelay; };
  fullEchoTapDelay.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoTapDelay);
  fullEchoTapDelay.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoTapDelay);
  fullEchoTapDelay.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoTapDelay);
  fullEchoTapDelay.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoTapDelay, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoTapBal = result->params[(int)FFGlobalUniParam::FullEchoTapBal];
  fullEchoTapBal.mode = FBParamMode::Accurate;
  fullEchoTapBal.defaultText = "50";
  fullEchoTapBal.name = "Echo Tap Bal";
  fullEchoTapBal.slotCount = FFGlobalUniMaxCount;
  fullEchoTapBal.unit = "%";
  fullEchoTapBal.id = "{1E8EDB12-2E07-47DE-BB0C-39AC596896E0}";
  fullEchoTapBal.type = FBParamType::Identity;
  auto selectfullEchoTapBal = [](auto& module) { return &module.acc.fullEchoTapBal; };
  fullEchoTapBal.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoTapBal);
  fullEchoTapBal.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoTapBal);
  fullEchoTapBal.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoTapBal);
  fullEchoTapBal.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoTapBal, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoFdbkDelay = result->params[(int)FFGlobalUniParam::FullEchoFdbkDelay];
  fullEchoFdbkDelay.mode = FBParamMode::Accurate;
  fullEchoFdbkDelay.defaultText = "50";
  fullEchoFdbkDelay.name = "Echo Fdbk Dly";
  fullEchoFdbkDelay.slotCount = FFGlobalUniMaxCount;
  fullEchoFdbkDelay.unit = "%";
  fullEchoFdbkDelay.id = "{6D51D872-4BFD-4F06-B202-BD971DB527FA}";
  fullEchoFdbkDelay.type = FBParamType::Identity;
  auto selectfullEchoFdbkDelay = [](auto& module) { return &module.acc.fullEchoFdbkDelay; };
  fullEchoFdbkDelay.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoFdbkDelay);
  fullEchoFdbkDelay.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoFdbkDelay);
  fullEchoFdbkDelay.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoFdbkDelay);
  fullEchoFdbkDelay.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoFdbkDelay, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoFdbkMix = result->params[(int)FFGlobalUniParam::FullEchoFdbkMix];
  fullEchoFdbkMix.mode = FBParamMode::Accurate;
  fullEchoFdbkMix.defaultText = "50";
  fullEchoFdbkMix.name = "Echo Fdbk Mix";
  fullEchoFdbkMix.slotCount = FFGlobalUniMaxCount;
  fullEchoFdbkMix.unit = "%";
  fullEchoFdbkMix.id = "{41E192B1-909D-41B6-93B5-9343460670A2}";
  fullEchoFdbkMix.type = FBParamType::Identity;
  auto selectfullEchoFdbkMix = [](auto& module) { return &module.acc.fullEchoFdbkMix; };
  fullEchoFdbkMix.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoFdbkMix);
  fullEchoFdbkMix.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoFdbkMix);
  fullEchoFdbkMix.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoFdbkMix);
  fullEchoFdbkMix.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoFdbkMix, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoFdbkAmt = result->params[(int)FFGlobalUniParam::FullEchoFdbkAmt];
  fullEchoFdbkAmt.mode = FBParamMode::Accurate;
  fullEchoFdbkAmt.defaultText = "50";
  fullEchoFdbkAmt.name = "Echo Fdbk Amt";
  fullEchoFdbkAmt.slotCount = FFGlobalUniMaxCount;
  fullEchoFdbkAmt.unit = "%";
  fullEchoFdbkAmt.id = "{BF96F4F2-74C7-4BA8-8FE5-72320499849E}";
  fullEchoFdbkAmt.type = FBParamType::Identity;
  auto selectfullEchoFdbkAmt = [](auto& module) { return &module.acc.fullEchoFdbkAmt; };
  fullEchoFdbkAmt.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoFdbkAmt);
  fullEchoFdbkAmt.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoFdbkAmt);
  fullEchoFdbkAmt.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoFdbkAmt);
  fullEchoFdbkAmt.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoFdbkAmt, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoReverbMix = result->params[(int)FFGlobalUniParam::FullEchoReverbMix];
  fullEchoReverbMix.mode = FBParamMode::Accurate;
  fullEchoReverbMix.defaultText = "50";
  fullEchoReverbMix.name = "Echo Rvrb Mix";
  fullEchoReverbMix.slotCount = FFGlobalUniMaxCount;
  fullEchoReverbMix.unit = "%";
  fullEchoReverbMix.id = "{475A0982-1DEE-4636-B532-0D0FCD816DEC}";
  fullEchoReverbMix.type = FBParamType::Identity;
  auto selectfullEchoReverbMix = [](auto& module) { return &module.acc.fullEchoReverbMix; };
  fullEchoReverbMix.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoReverbMix);
  fullEchoReverbMix.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoReverbMix);
  fullEchoReverbMix.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoReverbMix);
  fullEchoReverbMix.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoReverbMix, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoReverbSize = result->params[(int)FFGlobalUniParam::FullEchoReverbSize];
  fullEchoReverbSize.mode = FBParamMode::Accurate;
  fullEchoReverbSize.defaultText = "50";
  fullEchoReverbSize.name = "Echo Rvrb Size";
  fullEchoReverbSize.slotCount = FFGlobalUniMaxCount;
  fullEchoReverbSize.unit = "%";
  fullEchoReverbSize.id = "{8E997A4E-BCF6-4599-9329-377E81F77B5F}";
  fullEchoReverbSize.type = FBParamType::Identity;
  auto selectfullEchoReverbSize = [](auto& module) { return &module.acc.fullEchoReverbSize; };
  fullEchoReverbSize.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoReverbSize);
  fullEchoReverbSize.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoReverbSize);
  fullEchoReverbSize.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoReverbSize);
  fullEchoReverbSize.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoReverbSize, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  auto& fullEchoReverbDamp = result->params[(int)FFGlobalUniParam::FullEchoReverbDamp];
  fullEchoReverbDamp.mode = FBParamMode::Accurate;
  fullEchoReverbDamp.defaultText = "50";
  fullEchoReverbDamp.name = "Echo Rvrb Damp";
  fullEchoReverbDamp.slotCount = FFGlobalUniMaxCount;
  fullEchoReverbDamp.unit = "%";
  fullEchoReverbDamp.id = "{6E27DACE-DEA9-4168-8752-6BFB0B09002E}";
  fullEchoReverbDamp.type = FBParamType::Identity;
  auto selectfullEchoReverbDamp = [](auto& module) { return &module.acc.fullEchoReverbDamp; };
  fullEchoReverbDamp.scalarAddr = FFSelectScalarParamAddr(selectModule, selectfullEchoReverbDamp);
  fullEchoReverbDamp.globalAccProcAddr = FFSelectProcParamAddr(selectModule, selectfullEchoReverbDamp);
  fullEchoReverbDamp.globalExchangeAddr = FFSelectExchangeParamAddr(selectModule, selectfullEchoReverbDamp);
  fullEchoReverbDamp.dependencies.enabled.audio.WhenSlots({ { (int)FFGlobalUniParam::VoiceCount, -1 }, { (int)FFGlobalUniParam::FullEchoReverbDamp, -1 }, { (int)FFGlobalUniParam::Type } }, [](auto const& slots, auto const& vs) { return slots[1] < vs[0] && vs[2] == (int)FFGlobalUniType::Full; });

  return result;
}